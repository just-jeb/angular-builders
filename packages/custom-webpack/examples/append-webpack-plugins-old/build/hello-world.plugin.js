
/**
 * Example web pack plugin that will take the 'index.html' generated by the Angular CLI and add
 * a simple build stamp that records when it was built just before the close of the body.
 */
class HelloWorldPlugin {
  /**
   * The angular CLI will generate the 'index.html' asset in response to the same
   * emit event that we are attaching to. We will wait for that the CLI's plugin
   * to complete polling for the asset. When it's finished we'll update it
   * with our buildstamp.
   *
   * @param {Object} compiler - The webpack compile object.
   */
  apply(compiler) {
    compiler.hooks.emit.tapPromise('ExamplePlugin', (compilation) => {

      // Wait for the CLI to generate the index.html.
      return this.waitForAsset(compilation, 'index.html').then((source) => {

        // Find where the end of the body is.
        const insertionPoint = source.original().source().lastIndexOf('</body>');

        // The build stamp to include in the file.
        const stamp = `\n<div>Hello world</div>\n`;

        // Use the ReplaceSource api to insert the stamp into the html.
        source.insert(insertionPoint, stamp);

      });
    });
  }

  /**
   * Wait for a compilation asset to be created. This is usefully when two plugins
   * are initiated from the same event but one needs the result of the other before
   * it can continue. This will wait for the asset to be available and then return
   * the asset.
   *
   * @param {Compilation} compilation - The webpack compliation object that includes a list of assets.
   * @param {String} assetName - The name of the asset to wait for.
   */
  waitForAsset(compilation, assetName) {
    const maxTime = 5000; // The maximum amount of time to wait for the asset.
    const intervalTime = 1; // The time between checks.
    const startTime = new Date().getTime();

    return new Promise((resolve, reject) => {
      if (compilation.assets[assetName]) {
        return resolve(compilation.assets[assetName]);
      }
      const interval = setInterval(() => {
        if (compilation.assets[assetName]) {
          clearInterval(interval);
          return resolve(compilation.assets[assetName]);
        }

        if (new Date().getTime() - startTime > maxTime) {
          return reject(new Error(`Failed to find the compilation asset ${assetName} within ${maxTime}ms.`));
        }
      }, intervalTime);
    });
  }
}

module.exports = HelloWorldPlugin;
